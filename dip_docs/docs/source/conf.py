# Consolidated Sphinx configuration for DIP_SMC_PSO
# Auto-generated by ChatGPT, updated for Phase 3 integration
import os, sys, subprocess, inspect
from pathlib import Path
from urllib.parse import quote

# Project root (assuming this conf.py is at dip_docs/docs/source/conf.py)
THIS_DIR = Path(__file__).parent
PROJECT_ROOT = THIS_DIR.parent.parent.parent  # Go up 3 levels: source -> docs -> dip_docs -> DIP_SMC_PSO
SRC_DIR = PROJECT_ROOT / "src"

# Add both src and project root to Python path for proper imports
if SRC_DIR.exists():
    sys.path.insert(0, str(SRC_DIR))
sys.path.insert(0, str(PROJECT_ROOT))

print(f"PROJECT_ROOT: {PROJECT_ROOT}")
print(f"SRC_DIR: {SRC_DIR}")
print(f"Python path: {sys.path[:3]}")  # Show first 3 entries

project = "DIP_SMC_PSO"
author = "Research Team"
copyright = "2024, Research Team"
release = "1.0.0"

# Core extensions for API documentation
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.napoleon",
    "sphinx.ext.viewcode",
    "sphinx.ext.intersphinx",
    "sphinx.ext.mathjax",
    "sphinx.ext.doctest",
    # Temporarily disabled until dependencies are available:
    # "sphinxcontrib.bibtex",
    # "myst_parser",
    # "sphinx_copybutton",
    # "sphinx_design",
    # "sphinx_togglebutton",
]

# File patterns
source_suffix = {
    '.rst': None,
}
master_doc = 'index'

templates_path = ["_templates"]
exclude_patterns = []

# Autodoc configuration
autodoc_default_options = {
    "members": True,
    "member-order": "bysource",
    "special-members": "__init__",
    "undoc-members": True,
    "exclude-members": "__weakref__",
    "show-inheritance": True,
}
autodoc_typehints = "description"
autodoc_member_order = "bysource"

# Autosummary configuration (keep disabled - autodoc works fine without it)
autosummary_generate = False
autosummary_generate_overwrite = True
autosummary_imported_members = True

# Mock only packages that are truly unavailable in docs environment
# Keep essential ones like numpy for proper type resolution
autodoc_mock_imports = [
    "pyswarms",
    "optuna",
    "streamlit",
    "control",
    # Keep numpy, scipy, matplotlib available for proper autodoc
]

# Napoleon (Google/NumPy style docstrings)
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = True
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True


# HTML theme configuration
html_theme = "basic"  # Use basic theme to avoid dependency issues
html_title = "DIP_SMC_PSO Documentation"
html_static_path = ["_static"]

# Doctest configuration
doctest_global_setup = """
import sys
import os

# Add src to path for doctests (use environment-based detection)
current_dir = os.getcwd()
# Look for src directory in project structure
possible_roots = [
    os.path.join(current_dir, '..', '..', '..', 'src'),
    os.path.join(current_dir, '..', '..', 'src'),
    os.path.join(current_dir, 'src'),
    'D:/Projects/main/DIP_SMC_PSO/src'
]
for src_path in possible_roots:
    if os.path.exists(src_path):
        sys.path.insert(0, src_path)
        break
"""

# Intersphinx mapping for cross-references
intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "numpy": ("https://numpy.org/doc/stable/", None),
    "scipy": ("https://docs.scipy.org/doc/scipy/", None),
}

# Less strict checking for initial build
nitpicky = False

# Simplified linkcode (disable for now to avoid complexity)
# linkcode will be re-enabled once basic build works
