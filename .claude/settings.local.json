{
  "permissions": {
    "allow": [
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git for-each-ref:*)",
      "Bash(grep:*)",
      "Read(//d/Projects/main/**)",
      "Bash(git worktree:*)",
      "Bash(for branch in bp-types-doctests c04/ci-pytest c04/factory-indent-fix c04/finish-line c04/fix-config-clean c04/fix-pydantic-settings c04/manual-config-fix c04/tests-integration c04_shim_logger c04_shim_logger_fix2)",
      "Bash(do echo \"=== Testing merge conflict for $branch ===\")",
      "Bash(git reset:*)",
      "Bash(/dev/null)",
      "Bash(if git merge --no-ff --no-commit \"origin/$branch\")",
      "Bash(then echo \"✓ $branch merges cleanly\")",
      "Bash(else echo \"⚠️  CONFLICT detected in $branch - will need manual resolution\")",
      "Bash(git merge:*)",
      "Bash(fi)",
      "Bash(done)",
      "Bash(do echo \"Creating backup ref for $branch\")",
      "Bash(git fetch:*)",
      "Bash(git checkout:*)",
      "Bash(git branch:*)",
      "Bash(printf:*)",
      "Bash(git rev-list:*)",
      "Bash(git push:*)",
      "Bash(git pull:*)",
      "Bash(python:*)",
      "Bash(pip install:*)",
      "Bash(py:*)",
      "Bash(gh pr create:*)",
      "Bash(git rebase:*)",
      "Bash(git rev-parse:*)",
      "Bash(test:*)",
      "Bash(chmod:*)",
      "Bash(gh pr:*)",
      "Bash(py -m pip install:*)",
      "Bash(./xlude.sh:*)",
      "Bash(./xlude.sh ci-gate:*)",
      "Bash(./xlude.sh backup-refs:*)",
      "Bash(mkdir:*)",
      "Bash(find:*)",
      "Bash(xargs -r git branch -D)",
      "Bash(xargs -I {} git push origin --delete {})",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pip install -U pip pytest)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m ensurepip --upgrade)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pip --version)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pytest --version)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"import pytest,sys; print(pytest.__version__, sys.executable)\")",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"import pytest; print(pytest.__version__)\")",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pip show pytest)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pytest test_sample.py)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pytest -q tests/test_core/test_dynamics_lowrank.py::TestSafety)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" dev/runner.py c1-03)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pip install numpy)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pip install pytest)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pip install pydantic)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pip install pydantic-settings)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" repo_validate.py fixtures/valid_plan.json)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" repo_validate.py fixtures/invalid_plan.json)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" tests/run_crossfield_tests.py)",
      "Bash(make validate:*)",
      "Bash(echo $?)",
      "Bash(echo \"Exit code: $?\")",
      "Bash(git tag:*)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" repo_validate.py --schema-version-enforce error fixtures/valid_plan.json)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" repo_validate.py --schema-version-enforce error fixtures/invalid_schema_version.json)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pytest -q)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pytest tests/test_property_based.py -q)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" repo_validate.py --max-bytes 100000 --timeout-s 1 fixtures/valid_plan.json)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" repo_validate.py --max-bytes 1 /tmp/tiny.json)",
      "Bash(\"C:\\Users\\sadeg\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" repo_validate.py --timeout-s 1 /tmp/tiny.json)"
    ],
    "deny": [],
    "ask": []
  }
}