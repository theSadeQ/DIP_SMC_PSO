
name: Validate ResearchPlanSpec

# Triggers: Run on push to main, pull requests, and manual dispatch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  pull_request:
    paths:
      - 'fixtures/*.json'
      - 'plans/**/*.json'
      - '**/*plan*.json'
      - 'validator.py'
      - 'repo_validate.py'
      - 'tests/**/*'
      - '.github/workflows/validate.yml'

jobs:
  validate:
    name: Validate ResearchPlan Fixtures
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for documentation permalink resolution
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: pip install -r requirements.txt
        
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Check for changed plan files
      id: changed_files
      run: |
        # Fetch base branch for comparison
        git fetch origin ${{ github.event.pull_request.base.ref || 'main' }} --depth=1 || true
        
        # Find changed JSON files that look like plan files
        CHANGED=$(git diff --name-only origin/${{ github.event.pull_request.base.ref || 'main' }}... 2>/dev/null | grep -E '(^plans/.+\.json$|.*plan.*\.json$)' || true)
        
        if [ -n "$CHANGED" ]; then
          echo "Changed plan files found:"
          echo "$CHANGED"
          echo "files=$CHANGED" >> $GITHUB_OUTPUT
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "No plan files changed"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Validate changed plan files
      if: steps.changed_files.outputs.has_changes == 'true'
      run: |
        echo "::group::Validating changed plan files"
        IFS=$'\n' read -rd '' -a files <<< "${{ steps.changed_files.outputs.files }}" || true
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "::notice::Validating $file"
            python repo_validate.py --schema-version-enforce error "$file" || exit 1
          else
            echo "::warning::File $file not found (may have been deleted)"
          fi
        done
        echo "::endgroup::"
      
    - name: Validate valid fixture
      id: validate_valid
      run: |
        echo "::group::Validating valid_plan.json"
        echo "Expected result: PASS (no errors)"
        python repo_validate.py fixtures/valid_plan.json > reports/valid_plan_report.json
        VALID_EXIT_CODE=$?
        echo "Valid fixture validation completed with exit code: $VALID_EXIT_CODE"
        echo "::endgroup::"
        
        echo "::group::Valid fixture report"
        cat reports/valid_plan_report.json
        echo "::endgroup::"
        
        # Fail if valid fixture has errors
        if [ $VALID_EXIT_CODE -ne 0 ]; then
          echo "::error::Valid fixture should not have any errors"
          exit 1
        fi
        
    - name: Validate invalid fixture
      id: validate_invalid
      run: |
        echo "::group::Validating invalid_plan.json"
        echo "Expected result: FAIL (has errors)"
        python repo_validate.py fixtures/invalid_plan.json > reports/invalid_plan_report.json || true
        echo "Invalid fixture validation completed"
        echo "::endgroup::"
        
        echo "::group::Invalid fixture report"
        cat reports/invalid_plan_report.json
        echo "::endgroup::"
        
        # Verify invalid fixture actually has errors
        if python -c "
import json
with open('reports/invalid_plan_report.json', 'r') as f:
    report = json.load(f)
if not report['errors']:
    print('ERROR: Invalid fixture should have errors')
    exit(1)
print(f'✓ Invalid fixture correctly shows {len(report[\"errors\"])} errors')
"; then
          echo "Invalid fixture validation check passed"
        else
          echo "::error::Invalid fixture should contain validation errors"
          exit 1
        fi
        
    - name: Run tests
      run: pytest -q
        
    - name: Upload validation reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: validation-reports
        path: reports/
        retention-days: 30
        
    - name: Validation Summary
      if: always()
      run: |
        echo "::notice::Validation completed successfully"
        echo "::notice::✓ Valid fixture passed validation (no errors)"
        echo "::notice::✓ Invalid fixture correctly failed validation (has errors)"
        echo "::notice::✓ Tests passed"
        echo "::notice::Reports saved to artifacts"
