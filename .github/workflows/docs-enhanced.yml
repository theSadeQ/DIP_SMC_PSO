# ====================================================================
# World-Class Documentation Build and Deployment
# Professional CI/CD Pipeline for DIP_SMC_PSO Documentation
# ====================================================================

name: 📚 Enhanced Documentation Build & Deploy

on:
  # Trigger on pushes to main branch
  push:
    branches: [main, master, develop]
    paths:
      - 'dip_docs/**'
      - 'docs/**'
      - 'src/**'
      - '.github/workflows/docs-enhanced.yml'
      - 'requirements*.txt'

  # Trigger on pull requests to main
  pull_request:
    branches: [main, master]
    paths:
      - 'dip_docs/**'
      - 'docs/**'
      - 'src/**'

  # Manual trigger with options
  workflow_dispatch:
    inputs:
      deploy_to_pages:
        description: 'Deploy to GitHub Pages'
        required: false
        default: 'true'
        type: boolean
      build_type:
        description: 'Build type'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - fast
          - debug

# Permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Concurrency settings to avoid multiple builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Environment variables
env:
  PYTHON_VERSION: '3.11'
  DOCS_DIR: 'dip_docs/docs'
  BUILD_DIR: 'dip_docs/docs/_build/html'
  CACHE_KEY_PREFIX: 'docs-enhanced-v2'

jobs:
  # ================================================================
  # Documentation Quality Checks
  # ================================================================
  quality-checks:
    name: 🔍 Documentation Quality Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install quality check tools
        run: |
          python -m pip install --upgrade pip
          pip install doc8 sphinx-lint rstcheck linkchecker

      - name: 📝 Check RST syntax
        run: |
          echo "::group::RST Syntax Check"
          find ${{ env.DOCS_DIR }} -name "*.rst" -exec rstcheck {} +
          echo "::endgroup::"

      - name: 🔗 Check documentation style
        run: |
          echo "::group::Documentation Style Check"
          doc8 ${{ env.DOCS_DIR }}/source --max-line-length 120
          echo "::endgroup::"

      - name: 🎯 Lint Sphinx documentation
        run: |
          echo "::group::Sphinx Lint Check"
          sphinx-lint ${{ env.DOCS_DIR }}/source
          echo "::endgroup::"

  # ================================================================
  # Build Documentation
  # ================================================================
  build-docs:
    name: 🏗️ Build Documentation
    runs-on: ubuntu-latest
    needs: [quality-checks]
    if: always() && (needs.quality-checks.result == 'success' || needs.quality-checks.result == 'skipped')

    strategy:
      matrix:
        docs-config:
          - name: "Enhanced"
            config-file: "conf_enhanced.py"
            requirements: "requirements-enhanced.txt"
          - name: "Standard"
            config-file: "conf.py"
            requirements: "requirements.txt"

    outputs:
      artifact-name: ${{ steps.artifact.outputs.name }}
      build-status: ${{ steps.build.outputs.status }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            ${{ env.DOCS_DIR }}/${{ matrix.docs-config.requirements }}
            requirements.txt

      - name: 🗂️ Cache documentation dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-

      - name: 📦 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pandoc \
            texlive-latex-recommended \
            texlive-latex-extra \
            texlive-fonts-recommended \
            texlive-fonts-extra \
            latexmk \
            librsvg2-bin

      - name: 📚 Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel

          # Install core requirements
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

          # Install enhanced documentation requirements
          if [ -f "${{ env.DOCS_DIR }}/${{ matrix.docs-config.requirements }}" ]; then
            pip install -r "${{ env.DOCS_DIR }}/${{ matrix.docs-config.requirements }}"
          fi

          # Install additional development dependencies
          pip install pytest coverage

      - name: 🔧 Verify installations
        run: |
          echo "::group::Python Environment"
          python --version
          pip --version
          pip list | grep -E "(sphinx|myst|bibtex)"
          echo "::endgroup::"

          echo "::group::System Tools"
          pandoc --version
          latex --version
          echo "::endgroup::"

      - name: 📁 Set up documentation structure
        run: |
          echo "::group::Documentation Structure"
          ls -la ${{ env.DOCS_DIR }}/
          ls -la ${{ env.DOCS_DIR }}/source/
          echo "::endgroup::"

      - name: 🏗️ Build documentation
        id: build
        run: |
          cd ${{ env.DOCS_DIR }}

          # Set configuration file
          if [ "${{ matrix.docs-config.config-file }}" != "conf.py" ]; then
            cp source/${{ matrix.docs-config.config-file }} source/conf.py
          fi

          echo "::group::Sphinx Build (${{ matrix.docs-config.name }})"

          # Build with enhanced error reporting
          python -m sphinx \
            -b html \
            -W \
            --keep-going \
            -T \
            -E \
            -a \
            -j auto \
            -v \
            source \
            _build/html \
            2>&1 | tee build.log

          BUILD_STATUS=$?
          echo "status=$BUILD_STATUS" >> $GITHUB_OUTPUT

          if [ $BUILD_STATUS -eq 0 ]; then
            echo "✅ Documentation build successful"
          else
            echo "❌ Documentation build failed"
            echo "::group::Build Log"
            cat build.log
            echo "::endgroup::"
            exit $BUILD_STATUS
          fi

          echo "::endgroup::"

      - name: 📊 Generate build report
        if: always()
        run: |
          cd ${{ env.DOCS_DIR }}

          echo "::group::Build Statistics"
          echo "**Build Configuration:** ${{ matrix.docs-config.name }}"
          echo "**Build Status:** ${{ steps.build.outputs.status == '0' && '✅ Success' || '❌ Failed' }}"
          echo "**Build Time:** $(date)"

          if [ -d "_build/html" ]; then
            echo "**Output Size:** $(du -sh _build/html | cut -f1)"
            echo "**Files Generated:** $(find _build/html -type f | wc -l)"
            echo "**HTML Files:** $(find _build/html -name "*.html" | wc -l)"
            echo "**Images:** $(find _build/html -name "*.png" -o -name "*.jpg" -o -name "*.svg" | wc -l)"
          fi

          if [ -f "build.log" ]; then
            echo "**Warnings:** $(grep -c "WARNING" build.log || echo "0")"
            echo "**Errors:** $(grep -c "ERROR" build.log || echo "0")"
          fi
          echo "::endgroup::"

      - name: 🔍 Run documentation tests
        if: steps.build.outputs.status == '0'
        run: |
          cd ${{ env.DOCS_DIR }}

          echo "::group::Documentation Tests"

          # Test for broken internal links
          python -m sphinx -b linkcheck source _build/linkcheck

          # Test doctests
          python -m sphinx -b doctest source _build/doctest

          # Validate HTML
          if command -v html5validator &> /dev/null; then
            html5validator --root _build/html --ignore-re ".*\.svg$"
          fi

          echo "::endgroup::"

      - name: 🗜️ Compress build artifacts
        if: steps.build.outputs.status == '0'
        run: |
          cd ${{ env.DOCS_DIR }}
          tar -czf documentation-${{ matrix.docs-config.name }}.tar.gz -C _build/html .

      - name: 📤 Upload documentation artifacts
        id: artifact
        if: steps.build.outputs.status == '0'
        uses: actions/upload-artifact@v3
        with:
          name: documentation-${{ matrix.docs-config.name }}-${{ github.sha }}
          path: |
            ${{ env.DOCS_DIR }}/_build/html/
            ${{ env.DOCS_DIR }}/build.log
          retention-days: 30

  # ================================================================
  # Deploy to GitHub Pages
  # ================================================================
  deploy-pages:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: |
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push' &&
      needs.build-docs.outputs.build-status == '0'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📥 Download enhanced documentation
        uses: actions/download-artifact@v3
        with:
          name: documentation-Enhanced-${{ github.sha }}
          path: ./docs-site

      - name: 🔧 Prepare GitHub Pages
        run: |
          echo "::group::Pages Preparation"

          # Add .nojekyll to prevent Jekyll processing
          touch ./docs-site/.nojekyll

          # Add custom domain (if needed)
          # echo "docs.yourproject.com" > ./docs-site/CNAME

          # Add GitHub Pages metadata
          cat > ./docs-site/.github-pages.json << EOF
          {
            "built_at": "$(date -Iseconds)",
            "commit": "${{ github.sha }}",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}"
          }
          EOF

          echo "Pages site prepared with $(find ./docs-site -type f | wc -l) files"
          echo "::endgroup::"

      - name: 📋 Setup GitHub Pages
        uses: actions/configure-pages@v3

      - name: 📤 Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./docs-site

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: 📊 Deployment summary
        run: |
          echo "::notice title=Deployment Success::Documentation deployed to ${{ steps.deployment.outputs.page_url }}"
          echo "🎉 **Documentation Successfully Deployed!**"
          echo "📖 **Site URL:** ${{ steps.deployment.outputs.page_url }}"
          echo "🔗 **Direct Link:** ${{ steps.deployment.outputs.page_url }}"
          echo "⏰ **Deployed at:** $(date)"
          echo "📦 **Commit:** ${{ github.sha }}"

  # ================================================================
  # Performance Analysis
  # ================================================================
  performance-analysis:
    name: 📈 Performance Analysis
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: needs.build-docs.outputs.build-status == '0'

    steps:
      - name: 📥 Download documentation
        uses: actions/download-artifact@v3
        with:
          name: documentation-Enhanced-${{ github.sha }}
          path: ./docs-analysis

      - name: 🔍 Analyze documentation performance
        run: |
          echo "::group::Performance Analysis"

          # Size analysis
          TOTAL_SIZE=$(du -sb ./docs-analysis | cut -f1)
          HTML_SIZE=$(find ./docs-analysis -name "*.html" -exec du -cb {} + | tail -1 | cut -f1)
          CSS_SIZE=$(find ./docs-analysis -name "*.css" -exec du -cb {} + | tail -1 | cut -f1)
          JS_SIZE=$(find ./docs-analysis -name "*.js" -exec du -cb {} + | tail -1 | cut -f1)
          IMAGE_SIZE=$(find ./docs-analysis \( -name "*.png" -o -name "*.jpg" -o -name "*.svg" \) -exec du -cb {} + | tail -1 | cut -f1)

          echo "**Total Size:** $(numfmt --to=iec $TOTAL_SIZE)"
          echo "**HTML:** $(numfmt --to=iec $HTML_SIZE)"
          echo "**CSS:** $(numfmt --to=iec $CSS_SIZE)"
          echo "**JavaScript:** $(numfmt --to=iec $JS_SIZE)"
          echo "**Images:** $(numfmt --to=iec $IMAGE_SIZE)"

          # Count analysis
          echo "**Files:**"
          echo "- HTML: $(find ./docs-analysis -name "*.html" | wc -l)"
          echo "- CSS: $(find ./docs-analysis -name "*.css" | wc -l)"
          echo "- JavaScript: $(find ./docs-analysis -name "*.js" | wc -l)"
          echo "- Images: $(find ./docs-analysis \( -name "*.png" -o -name "*.jpg" -o -name "*.svg" \) | wc -l)"

          # Performance recommendations
          if [ $TOTAL_SIZE -gt 104857600 ]; then  # 100MB
            echo "::warning::Documentation size is large ($TOTAL_SIZE bytes). Consider optimization."
          fi

          echo "::endgroup::"

  # ================================================================
  # Notification and Cleanup
  # ================================================================
  notify-completion:
    name: 📬 Notify Completion
    runs-on: ubuntu-latest
    needs: [build-docs, deploy-pages, performance-analysis]
    if: always()

    steps:
      - name: 📋 Create status summary
        run: |
          echo "## 📚 Documentation Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build-docs.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy-pages.result == 'success' && '✅ Success' || needs.deploy-pages.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Analysis | ${{ needs.performance-analysis.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy-pages.result }}" == "success" ]; then
            echo "🎉 **Documentation is live!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📖 [View Documentation](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🎯 Set status check
        if: always()
        run: |
          if [ "${{ needs.build-docs.result }}" == "success" ]; then
            echo "Documentation build completed successfully! 🎉"
          else
            echo "Documentation build failed ❌"
            exit 1
          fi